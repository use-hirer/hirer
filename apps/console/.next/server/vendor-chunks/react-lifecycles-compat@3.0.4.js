"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-lifecycles-compat@3.0.4";
exports.ids = ["vendor-chunks/react-lifecycles-compat@3.0.4"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/react-lifecycles-compat@3.0.4/node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js":
/*!*********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/react-lifecycles-compat@3.0.4/node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   polyfill: () => (/* binding */ polyfill)\n/* harmony export */ });\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ function componentWillMount() {\n    // Call this.constructor.gDSFP to support sub-classes.\n    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n    if (state !== null && state !== undefined) {\n        this.setState(state);\n    }\n}\nfunction componentWillReceiveProps(nextProps) {\n    // Call this.constructor.gDSFP to support sub-classes.\n    // Use the setState() updater to ensure state isn't stale in certain edge cases.\n    function updater(prevState) {\n        var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n        return state !== null && state !== undefined ? state : null;\n    }\n    // Binding \"this\" is important for shallow renderer support.\n    this.setState(updater.bind(this));\n}\nfunction componentWillUpdate(nextProps, nextState) {\n    try {\n        var prevProps = this.props;\n        var prevState = this.state;\n        this.props = nextProps;\n        this.state = nextState;\n        this.__reactInternalSnapshotFlag = true;\n        this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);\n    } finally{\n        this.props = prevProps;\n        this.state = prevState;\n    }\n}\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\nfunction polyfill(Component) {\n    var prototype = Component.prototype;\n    if (!prototype || !prototype.isReactComponent) {\n        throw new Error(\"Can only polyfill class components\");\n    }\n    if (typeof Component.getDerivedStateFromProps !== \"function\" && typeof prototype.getSnapshotBeforeUpdate !== \"function\") {\n        return Component;\n    }\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Error if any of these lifecycles are present,\n    // Because they would work differently between older and newer (16.3+) versions of React.\n    var foundWillMountName = null;\n    var foundWillReceivePropsName = null;\n    var foundWillUpdateName = null;\n    if (typeof prototype.componentWillMount === \"function\") {\n        foundWillMountName = \"componentWillMount\";\n    } else if (typeof prototype.UNSAFE_componentWillMount === \"function\") {\n        foundWillMountName = \"UNSAFE_componentWillMount\";\n    }\n    if (typeof prototype.componentWillReceiveProps === \"function\") {\n        foundWillReceivePropsName = \"componentWillReceiveProps\";\n    } else if (typeof prototype.UNSAFE_componentWillReceiveProps === \"function\") {\n        foundWillReceivePropsName = \"UNSAFE_componentWillReceiveProps\";\n    }\n    if (typeof prototype.componentWillUpdate === \"function\") {\n        foundWillUpdateName = \"componentWillUpdate\";\n    } else if (typeof prototype.UNSAFE_componentWillUpdate === \"function\") {\n        foundWillUpdateName = \"UNSAFE_componentWillUpdate\";\n    }\n    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n        var componentName = Component.displayName || Component.name;\n        var newApiName = typeof Component.getDerivedStateFromProps === \"function\" ? \"getDerivedStateFromProps()\" : \"getSnapshotBeforeUpdate()\";\n        throw Error(\"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n\" + componentName + \" uses \" + newApiName + \" but also contains the following legacy lifecycles:\" + (foundWillMountName !== null ? \"\\n  \" + foundWillMountName : \"\") + (foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : \"\") + (foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : \"\") + \"\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n\" + \"https://fb.me/react-async-component-lifecycle-hooks\");\n    }\n    // React <= 16.2 does not support static getDerivedStateFromProps.\n    // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n    // Newer versions of React will ignore these lifecycles if gDSFP exists.\n    if (typeof Component.getDerivedStateFromProps === \"function\") {\n        prototype.componentWillMount = componentWillMount;\n        prototype.componentWillReceiveProps = componentWillReceiveProps;\n    }\n    // React <= 16.2 does not support getSnapshotBeforeUpdate.\n    // As a workaround, use cWU to invoke the new lifecycle.\n    // Newer versions of React will ignore that lifecycle if gSBU exists.\n    if (typeof prototype.getSnapshotBeforeUpdate === \"function\") {\n        if (typeof prototype.componentDidUpdate !== \"function\") {\n            throw new Error(\"Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype\");\n        }\n        prototype.componentWillUpdate = componentWillUpdate;\n        var componentDidUpdate = prototype.componentDidUpdate;\n        prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {\n            // 16.3+ will not execute our will-update method;\n            // It will pass a snapshot value to did-update though.\n            // Older versions will require our polyfilled will-update value.\n            // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n            // Because for <= 15.x versions this might be a \"prevContext\" object.\n            // We also can't just check \"__reactInternalSnapshot\",\n            // Because get-snapshot might return a falsy value.\n            // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n            var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;\n            componentDidUpdate.call(this, prevProps, prevState, snapshot);\n        };\n    }\n    return Component;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0QDMuMC40L25vZGVfbW9kdWxlcy9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5lcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7O0NBS0MsR0FFRCxTQUFTQTtJQUNQLHNEQUFzRDtJQUN0RCxJQUFJQyxRQUFRLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUNDLEtBQUssRUFBRSxJQUFJLENBQUNILEtBQUs7SUFDNUUsSUFBSUEsVUFBVSxRQUFRQSxVQUFVSSxXQUFXO1FBQ3pDLElBQUksQ0FBQ0MsUUFBUSxDQUFDTDtJQUNoQjtBQUNGO0FBRUEsU0FBU00sMEJBQTBCQyxTQUFTO0lBQzFDLHNEQUFzRDtJQUN0RCxnRkFBZ0Y7SUFDaEYsU0FBU0MsUUFBUUMsU0FBUztRQUN4QixJQUFJVCxRQUFRLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyx3QkFBd0IsQ0FBQ0ssV0FBV0U7UUFDakUsT0FBT1QsVUFBVSxRQUFRQSxVQUFVSSxZQUFZSixRQUFRO0lBQ3pEO0lBQ0EsNERBQTREO0lBQzVELElBQUksQ0FBQ0ssUUFBUSxDQUFDRyxRQUFRRSxJQUFJLENBQUMsSUFBSTtBQUNqQztBQUVBLFNBQVNDLG9CQUFvQkosU0FBUyxFQUFFSyxTQUFTO0lBQy9DLElBQUk7UUFDRixJQUFJQyxZQUFZLElBQUksQ0FBQ1YsS0FBSztRQUMxQixJQUFJTSxZQUFZLElBQUksQ0FBQ1QsS0FBSztRQUMxQixJQUFJLENBQUNHLEtBQUssR0FBR0k7UUFDYixJQUFJLENBQUNQLEtBQUssR0FBR1k7UUFDYixJQUFJLENBQUNFLDJCQUEyQixHQUFHO1FBQ25DLElBQUksQ0FBQ0MsdUJBQXVCLEdBQUcsSUFBSSxDQUFDQyx1QkFBdUIsQ0FDekRILFdBQ0FKO0lBRUosU0FBVTtRQUNSLElBQUksQ0FBQ04sS0FBSyxHQUFHVTtR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T2pCO0FBQ1Q7QUFFb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oaXJlci8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXRAMy4wLjQvbm9kZV9tb2R1bGVzL3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0L3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0LmVzLmpzP2RmMjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgaWYgKHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgLy8gVXNlIHRoZSBzZXRTdGF0ZSgpIHVwZGF0ZXIgdG8gZW5zdXJlIHN0YXRlIGlzbid0IHN0YWxlIGluIGNlcnRhaW4gZWRnZSBjYXNlcy5cbiAgZnVuY3Rpb24gdXBkYXRlcihwcmV2U3RhdGUpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQgPyBzdGF0ZSA6IG51bGw7XG4gIH1cbiAgLy8gQmluZGluZyBcInRoaXNcIiBpcyBpbXBvcnRhbnQgZm9yIHNoYWxsb3cgcmVuZGVyZXIgc3VwcG9ydC5cbiAgdGhpcy5zZXRTdGF0ZSh1cGRhdGVyLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHByZXZTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnID0gdHJ1ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90ID0gdGhpcy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZVxuICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgdGhpcy5wcm9wcyA9IHByZXZQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gcHJldlN0YXRlO1xuICB9XG59XG5cbi8vIFJlYWN0IG1heSB3YXJuIGFib3V0IGNXTS9jV1JQL2NXVSBtZXRob2RzIGJlaW5nIGRlcHJlY2F0ZWQuXG4vLyBBZGQgYSBmbGFnIHRvIHN1cHByZXNzIHRoZXNlIHdhcm5pbmdzIGZvciB0aGlzIHNwZWNpYWwgY2FzZS5cbmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuXG5mdW5jdGlvbiBwb2x5ZmlsbChDb21wb25lbnQpIHtcbiAgdmFyIHByb3RvdHlwZSA9IENvbXBvbmVudC5wcm90b3R5cGU7XG5cbiAgaWYgKCFwcm90b3R5cGUgfHwgIXByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSBwb2x5ZmlsbCBjbGFzcyBjb21wb25lbnRzJyk7XG4gIH1cblxuICBpZiAoXG4gICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cblxuICAvLyBJZiBuZXcgY29tcG9uZW50IEFQSXMgYXJlIGRlZmluZWQsIFwidW5zYWZlXCIgbGlmZWN5Y2xlcyB3b24ndCBiZSBjYWxsZWQuXG4gIC8vIEVycm9yIGlmIGFueSBvZiB0aGVzZSBsaWZlY3ljbGVzIGFyZSBwcmVzZW50LFxuICAvLyBCZWNhdXNlIHRoZXkgd291bGQgd29yayBkaWZmZXJlbnRseSBiZXR3ZWVuIG9sZGVyIGFuZCBuZXdlciAoMTYuMyspIHZlcnNpb25zIG9mIFJlYWN0LlxuICB2YXIgZm91bmRXaWxsTW91bnROYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsVXBkYXRlTmFtZSA9IG51bGw7XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdjb21wb25lbnRXaWxsTW91bnQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9XG4gIGlmIChcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbFxuICApIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZTtcbiAgICB2YXIgbmV3QXBpTmFtZSA9XG4gICAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKSdcbiAgICAgICAgOiAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSc7XG5cbiAgICB0aHJvdyBFcnJvcihcbiAgICAgICdVbnNhZmUgbGVnYWN5IGxpZmVjeWNsZXMgd2lsbCBub3QgYmUgY2FsbGVkIGZvciBjb21wb25lbnRzIHVzaW5nIG5ldyBjb21wb25lbnQgQVBJcy5cXG5cXG4nICtcbiAgICAgICAgY29tcG9uZW50TmFtZSArXG4gICAgICAgICcgdXNlcyAnICtcbiAgICAgICAgbmV3QXBpTmFtZSArXG4gICAgICAgICcgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczonICtcbiAgICAgICAgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxNb3VudE5hbWUgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbFxuICAgICAgICAgID8gJ1xcbiAgJyArIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWVcbiAgICAgICAgICA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbFVwZGF0ZU5hbWUgOiAnJykgK1xuICAgICAgICAnXFxuXFxuVGhlIGFib3ZlIGxpZmVjeWNsZXMgc2hvdWxkIGJlIHJlbW92ZWQuIExlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6XFxuJyArXG4gICAgICAgICdodHRwczovL2ZiLm1lL3JlYWN0LWFzeW5jLWNvbXBvbmVudC1saWZlY3ljbGUtaG9va3MnXG4gICAgKTtcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV00gYW5kIGNXUlAgdG8gaW52b2tlIHRoZSBuZXcgc3RhdGljIGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhlc2UgbGlmZWN5Y2xlcyBpZiBnRFNGUCBleGlzdHMuXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBjb21wb25lbnRXaWxsTW91bnQ7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV1UgdG8gaW52b2tlIHRoZSBuZXcgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGF0IGxpZmVjeWNsZSBpZiBnU0JVIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBwb2x5ZmlsbCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIGZvciBjb21wb25lbnRzIHRoYXQgZG8gbm90IGRlZmluZSBjb21wb25lbnREaWRVcGRhdGUoKSBvbiB0aGUgcHJvdG90eXBlJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGNvbXBvbmVudFdpbGxVcGRhdGU7XG5cbiAgICB2YXIgY29tcG9uZW50RGlkVXBkYXRlID0gcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZTtcblxuICAgIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVQb2x5ZmlsbChcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZSxcbiAgICAgIG1heWJlU25hcHNob3RcbiAgICApIHtcbiAgICAgIC8vIDE2LjMrIHdpbGwgbm90IGV4ZWN1dGUgb3VyIHdpbGwtdXBkYXRlIG1ldGhvZDtcbiAgICAgIC8vIEl0IHdpbGwgcGFzcyBhIHNuYXBzaG90IHZhbHVlIHRvIGRpZC11cGRhdGUgdGhvdWdoLlxuICAgICAgLy8gT2xkZXIgdmVyc2lvbnMgd2lsbCByZXF1aXJlIG91ciBwb2x5ZmlsbGVkIHdpbGwtdXBkYXRlIHZhbHVlLlxuICAgICAgLy8gV2UgbmVlZCB0byBoYW5kbGUgYm90aCBjYXNlcywgYnV0IGNhbid0IGp1c3QgY2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBcIm1heWJlU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZm9yIDw9IDE1LnggdmVyc2lvbnMgdGhpcyBtaWdodCBiZSBhIFwicHJldkNvbnRleHRcIiBvYmplY3QuXG4gICAgICAvLyBXZSBhbHNvIGNhbid0IGp1c3QgY2hlY2sgXCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBnZXQtc25hcHNob3QgbWlnaHQgcmV0dXJuIGEgZmFsc3kgdmFsdWUuXG4gICAgICAvLyBTbyBjaGVjayBmb3IgdGhlIGV4cGxpY2l0IF9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyBmbGFnIHRvIGRldGVybWluZSBiZWhhdmlvci5cbiAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnXG4gICAgICAgID8gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFxuICAgICAgICA6IG1heWJlU25hcHNob3Q7XG5cbiAgICAgIGNvbXBvbmVudERpZFVwZGF0ZS5jYWxsKHRoaXMsIHByZXZQcm9wcywgcHJldlN0YXRlLCBzbmFwc2hvdCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59XG5cbmV4cG9ydCB7IHBvbHlmaWxsIH07XG4iXSwibmFtZXMiOlsiY29tcG9uZW50V2lsbE1vdW50Iiwic3RhdGUiLCJjb25zdHJ1Y3RvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsInByb3BzIiwidW5kZWZpbmVkIiwic2V0U3RhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwidXBkYXRlciIsInByZXZTdGF0ZSIsImJpbmQiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwibmV4dFN0YXRlIiwicHJldlByb3BzIiwiX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIiwiX19yZWFjdEludGVybmFsU25hcHNob3QiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmciLCJwb2x5ZmlsbCIsIkNvbXBvbmVudCIsInByb3RvdHlwZSIsImlzUmVhY3RDb21wb25lbnQiLCJFcnJvciIsImZvdW5kV2lsbE1vdW50TmFtZSIsImZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUiLCJmb3VuZFdpbGxVcGRhdGVOYW1lIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJuYW1lIiwibmV3QXBpTmFtZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZVBvbHlmaWxsIiwibWF5YmVTbmFwc2hvdCIsInNuYXBzaG90IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/react-lifecycles-compat@3.0.4/node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js\n");

/***/ })

};
;