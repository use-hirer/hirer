generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator json {
  provider = "prisma-json-types-generator"
}

model Account {
  provider          String
  providerAccountId String
  userId            String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model VerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  email     String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified Boolean? @default(false)
  image         String?
  onboarded     Boolean  @default(false)
  /// [UserData]
  data          Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts          Account[]
  sessions          Session[]
  teams             TeamMember[]
  verificationCodes VerificationCode[]
  activity          Activity[]
  job               Job[]
}

model Team {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  website   String?
  bio       String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobs        Job[]
  members     TeamMember[]
  teamInvites TeamInvite[]
  activity    Activity[]
}

model TeamInvite {
  email     String
  expires   DateTime
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  createdAt DateTime @default(now())

  @@unique([email, teamId])
  @@index([teamId])
}

model TeamMember {
  id        String         @id @default(cuid())
  userId    String
  teamId    String
  role      TeamMemberRole @default(Member)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

enum TeamMemberRole {
  Member
  Owner
}

model Job {
  id            String   @id @default(cuid())
  title         String
  location      String
  description   String
  slug          String   @unique
  teamId        String
  creatorUserId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  creator      User                   @relation(fields: [creatorUserId], references: [id])
  team         Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  activity     Activity[]
  applications CandidateApplication[]

  @@index([teamId])
}

model Candidate {
  id        String   @id @default(cuid())
  email     String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applications CandidateApplication[]
}

model CandidateApplication {
  id          String   @id @default(cuid())
  candidateId String
  jobId       String
  notes       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  job       Job       @relation(fields: [jobId], references: [id])
  candidate Candidate @relation(fields: [candidateId], references: [id])

  @@unique([candidateId, jobId])
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  /// [ActivityData]
  data      Json
  userId    String?
  jobId     String?
  teamId    String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  job  Job?  @relation(fields: [jobId], references: [id], onDelete: SetNull)
  team Team? @relation(fields: [teamId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([jobId])
  @@index([teamId])
  @@index([type])
  @@index([createdAt])
}
